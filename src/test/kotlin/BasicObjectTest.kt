import com.example.testsuite.BasicObject
import com.example.testsuite.ListsObject
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import java.time.Instant

class BasicObjectTest {

    @Test
    fun `test conversion of basic data stuff`() {
        val data = BasicObject.newBuilder()
            .setPrimitive(1)
            .setNullablePrimitive(10 as Int?)
            .setString("value" as String?)
            .setNullableString("value2" as String?)
            .setAutoGeneratedJavaClass(Instant.ofEpochMilli(100) as Instant?)
            .setNullableAutoGeneratedJavaClass(Instant.ofEpochMilli(1000) as Instant?)
            .setUnionType(500 as Int?)
            .setNullableUnionType("500" as String?)
            .build();

        val primitive: Int = data.primitive
        val nullablePrimitive: Int? = data.nullablePrimitive
        val string: String = data.string
        val nullableString: String? = data.nullableString
        val autoGeneratedJavaClass: Instant = data.autoGeneratedJavaClass
        val nullableAutoGeneratedJavaClass: Instant = data.autoGeneratedJavaClass
        val unionType: Any = data.unionType
        val nullableUnionType: Any? = data.nullableUnionType
    }

    @Test
    fun `converting list values stuff`() {
        val data = ListsObject.newBuilder()
            // 2 levels
            .setListWithRegularValues(listOf(1) as List<Int>?)
            .setNullableListWithRegularValues(listOf(10) as List<Int>?)
            .setListWithNullableValues(listOf(2, null) as List<Int?>?)
            .setNullableListWithNullableValues(listOf(20, null) as List<Int?>?)
            // 3 levels
            .setListWithRegularListWithRegularValues(listOf(listOf(3)) as List<List<Int>>?)
            .setNullableListWithRegularListWithRegularValues(listOf(listOf(30)) as List<List<Int>>?)
            .setListWithRegularListWithNullableValues(listOf(listOf(4, null)) as List<List<Int?>>?)
            .setNullableListWithRegularListWithNullableValues(listOf(listOf(40, null)) as List<List<Int?>>?)
            .setListWithNullableListWithRegularValues(listOf(listOf(5), null) as List<List<Int>?>?)
            .setListWithNullableListWithNullableValues(listOf(listOf(50, null), null) as List<List<Int?>?>?)
            .setNullableListWithNullableListWithRegularValues(listOf(listOf(6, null), null) as List<List<Int>?>?)
            .setNullableListWithNullableListWithNullableValues(listOf(listOf(60, null), null) as List<List<Int?>?>?)
            .build()

        // 2 levels
        val listWithRegularValues: List<Int> = data.listWithRegularValues
        val nullableListWithRegularValues: List<Int>? = data.nullableListWithRegularValues
        val listWithNullableValues: List<Int?> = data.listWithNullableValues
        val nullableListWithNullableValues: List<Int?>? = data.nullableListWithNullableValues

        // 3 levels
        val listWithRegularListWithRegularValues: List<List<Int>> = data.listWithRegularListWithRegularValues
        val nullableListWithRegularListWithRegularValues: List<List<Int>>? = data.nullableListWithRegularListWithRegularValues
        val listWithRegularListWithNullableValues: List<List<Int?>> = data.listWithRegularListWithNullableValues
        val nullableListWithRegularListWithNullableValues: List<List<Int?>>? = data.nullableListWithRegularListWithNullableValues
        val listWithNullableListWithRegularValues: List<List<Int>?> = data.listWithNullableListWithRegularValues
        val listWithNullableListWithNullableValues: List<List<Int?>?> = data.listWithNullableListWithNullableValues
        val nullableListWithNullableListWithRegularValues: List<List<Int>?>? = data.nullableListWithNullableListWithRegularValues
        val nullableListWithNullableListWithNullableValues: List<List<Int?>?>? = data.nullableListWithNullableListWithNullableValues
    }
}