import com.example.testsuite.BasicObject
import com.example.testsuite.DomainClass
import com.example.testsuite.DomainClassWrapper
import com.example.testsuite.ListsAndMapsTogether
import com.example.testsuite.ListsObject
import com.example.testsuite.MapsObject
import org.junit.jupiter.api.Test
import java.time.Instant

class BasicObjectTest {

    @Test
    fun `test conversion of basic data stuff`() {
        val data = BasicObject.newBuilder()
            .setPrimitive(1)
            .setNullablePrimitive(10 as Int?)
            .setString("value" as String)
            .setNullableString("value2" as String?)
            .setAutoGeneratedJavaClass(Instant.ofEpochMilli(100) as Instant)
            .setNullableAutoGeneratedJavaClass(Instant.ofEpochMilli(1000) as Instant?)
            .setUnionType(500 as Int)
            .setNullableUnionType("500" as String?)
            .build();

        val primitive: Int = data.primitive
        val nullablePrimitive: Int? = data.nullablePrimitive
        val string: String = data.string
        val nullableString: String? = data.nullableString
        val autoGeneratedJavaClass: Instant = data.autoGeneratedJavaClass
        val nullableAutoGeneratedJavaClass: Instant = data.autoGeneratedJavaClass
        val unionType: Any = data.unionType
        val nullableUnionType: Any? = data.nullableUnionType
    }

    @Test
    fun `converting list values stuff`() {
        val data = ListsObject.newBuilder()
            // 2 levels
            .setListWithRegularValues(listOf(1) as List<Int>)
            .setNullableListWithRegularValues(listOf(10) as List<Int>?)
            .setListWithNullableValues(listOf(2, null) as List<Int?>)
            .setNullableListWithNullableValues(listOf(20, null) as List<Int?>?)
            // 3 levels
            .setListWithRegularListWithRegularValues(listOf(listOf(3)) as List<List<Int>>)
            .setNullableListWithRegularListWithRegularValues(listOf(listOf(30)) as List<List<Int>>?)
            .setListWithRegularListWithNullableValues(listOf(listOf(4, null)) as List<List<Int?>>)
            .setNullableListWithRegularListWithNullableValues(listOf(listOf(40, null)) as List<List<Int?>>?)
            .setListWithNullableListWithRegularValues(listOf(listOf(5), null) as List<List<Int>?>)
            .setListWithNullableListWithNullableValues(listOf(listOf(50, null), null) as List<List<Int?>?>)
            .setNullableListWithNullableListWithRegularValues(listOf(listOf(6, null), null) as List<List<Int>?>?)
            .setNullableListWithNullableListWithNullableValues(listOf(listOf(60, null), null) as List<List<Int?>?>?)
            .build()

        // 2 levels
        val listWithRegularValues: List<Int> = data.listWithRegularValues
        val nullableListWithRegularValues: List<Int>? = data.nullableListWithRegularValues
        val listWithNullableValues: List<Int?> = data.listWithNullableValues
        val nullableListWithNullableValues: List<Int?>? = data.nullableListWithNullableValues

        // 3 levels
        val listWithRegularListWithRegularValues: List<List<Int>> = data.listWithRegularListWithRegularValues
        val nullableListWithRegularListWithRegularValues: List<List<Int>>? =
            data.nullableListWithRegularListWithRegularValues
        val listWithRegularListWithNullableValues: List<List<Int?>> = data.listWithRegularListWithNullableValues
        val nullableListWithRegularListWithNullableValues: List<List<Int?>>? =
            data.nullableListWithRegularListWithNullableValues
        val listWithNullableListWithRegularValues: List<List<Int>?> = data.listWithNullableListWithRegularValues
        val listWithNullableListWithNullableValues: List<List<Int?>?> = data.listWithNullableListWithNullableValues
        val nullableListWithNullableListWithRegularValues: List<List<Int>?>? =
            data.nullableListWithNullableListWithRegularValues
        val nullableListWithNullableListWithNullableValues: List<List<Int?>?>? =
            data.nullableListWithNullableListWithNullableValues
    }

    @Test
    fun `converting maps values stuff`() {
        val data = MapsObject.newBuilder()
            // 2 levels
            .setMapWithRegularValues(mapOf("a" to 1) as Map<String, Int>)
            .setNullableMapWithRegularValues(mapOf("a" to 10) as Map<String, Int>?)
            .setMapWithNullableValues(mapOf("a" to 2, "b" to null) as Map<String, Int?>)
            .setNullableMapWithNullableValues(mapOf("a" to 20, "b" to null) as Map<String, Int?>?)
            // 3 levels
            .setMapWithRegularMapWithRegularValues(mapOf("a" to mapOf("aa" to 3)) as Map<String, Map<String, Int>>)
            .setNullableMapWithRegularMapWithRegularValues(mapOf("a" to mapOf("aa" to 30)) as Map<String, Map<String, Int>>?)
            .setMapWithRegularMapWithNullableValues(
                mapOf(
                    "a" to mapOf(
                        "aa" to 4,
                        "ab" to null
                    )
                ) as Map<String, Map<String, Int?>>
            )
            .setNullableMapWithRegularMapWithNullableValues(
                mapOf(
                    "a" to mapOf(
                        "aa" to 40,
                        "ab" to null
                    )
                ) as Map<String, Map<String, Int?>>?
            )
            .setMapWithNullableMapWithRegularValues(
                mapOf(
                    "a" to mapOf("aa" to 5),
                    "b" to null
                ) as Map<String, Map<String, Int>?>
            )
            .setMapWithNullableMapWithNullableValues(
                mapOf(
                    "a" to mapOf("aa" to 50, "ab" to null),
                    "b" to null
                ) as Map<String, Map<String, Int?>?>
            )
            .setNullableMapWithNullableMapWithRegularValues(
                mapOf(
                    "a" to mapOf("aa" to 6, "ab" to null),
                    "b" to null
                ) as Map<String, Map<String, Int>?>?
            )
            .setNullableMapWithNullableMapWithNullableValues(
                mapOf(
                    "a" to mapOf("aa" to 60, "ab" to null),
                    "b" to null
                ) as Map<String, Map<String, Int?>?>?
            )
            .build()

        // 2 levels
        val mapWithRegularValues: Map<String, Int> = data.mapWithRegularValues
        val nullableMapWithRegularValues: Map<String, Int>? = data.nullableMapWithRegularValues
        val mapWithNullableValues: Map<String, Int?> = data.mapWithNullableValues
        val nullableMapWithNullableValues: Map<String, Int?>? = data.nullableMapWithNullableValues

        // 3 levels
        val mapWithRegularMapWithRegularValues: Map<String, Map<String, Int>> = data.mapWithRegularMapWithRegularValues
        val nullableMapWithRegularMapWithRegularValues: Map<String, Map<String, Int>>? =
            data.nullableMapWithRegularMapWithRegularValues
        val mapWithRegularMapWithNullableValues: Map<String, Map<String, Int?>> =
            data.mapWithRegularMapWithNullableValues
        val nullableMapWithRegularMapWithNullableValues: Map<String, Map<String, Int?>>? =
            data.nullableMapWithRegularMapWithNullableValues
        val mapWithNullableMapWithRegularValues: Map<String, Map<String, Int>?> =
            data.mapWithNullableMapWithRegularValues
        val mapWithNullableMapWithNullableValues: Map<String, Map<String, Int?>?> =
            data.mapWithNullableMapWithNullableValues
        val nullableMapWithNullableMapWithRegularValues: Map<String, Map<String, Int>?>? =
            data.nullableMapWithNullableMapWithRegularValues
        val nullableMapWithNullableMapWithNullableValues: Map<String, Map<String, Int?>?>? =
            data.nullableMapWithNullableMapWithNullableValues
    }

    @Test
    fun `list and maps together conversion`() {
        val data = ListsAndMapsTogether.newBuilder()
            .setListWithRegularMapWithRegularValues(listOf(mapOf("a" to 1)) as List<Map<String, Int>>)
            .setListWithRegularMapWithNullableValues(listOf(mapOf("a" to 10, "b" to null)) as List<Map<String, Int?>>)
            .setMapWithRegularListWithRegularValues(mapOf("a" to listOf(2)) as Map<String, List<Int>>)
            .setMapWithRegularListWithNullableValues(mapOf("a" to listOf(20, null)) as Map<String, List<Int?>>)
            .build()

        val listWithRegularMapWithRegularValues: List<Map<String, Int>> = data.listWithRegularMapWithRegularValues
        val listWithRegularMapWithNullableValues: List<Map<String, Int?>> = data.listWithRegularMapWithNullableValues
        val mapWithRegularListWithRegularValues: Map<String, List<Int>> = data.mapWithRegularListWithRegularValues
        val mapWithRegularListWithNullableValues: Map<String, List<Int?>> = data.mapWithRegularListWithNullableValues
    }

    @Test
    fun `schema classes conversion`() {
        val data = DomainClassWrapper.newBuilder()
            .setIndependentField("hi" as String)
            .setDomainClass(
                DomainClass.newBuilder()
                    .setField1("1" as String)
                    .setField2(1 as Int)
                    .build() as DomainClass
            )
            .setDomainClassBuilder(null)
            .setDomainClassBuilder(
                DomainClass.newBuilder()
                    .setField1("2" as String)
                    .setField2(2 as Int) as DomainClass.Builder?
            )
            .setNullableDomainClassBuilder(null)
            .setNullableDomainClass(null)
            .setListOfRegularDomainClass(
                listOf(
                    DomainClass.newBuilder()
                        .setField1("3")
                        .setField2(3)
                        .build()
                ) as List<DomainClass>
            )
            .setMapOfRegularDomainClass(
                mapOf(
                    "a" to DomainClass.newBuilder()
                        .setField1("4")
                        .setField2(4)
                        .build()
                ) as Map<String, DomainClass>
            )
            .setMapOfRegularDomainClass(
                mapOf(
                    "a" to DomainClass.newBuilder()
                        .setField1("4")
                        .setField2(4)
                        .build()
                ) as Map<String, DomainClass>
            )
            .build()

        val independentField: String = data.independentField
        val domainClass: DomainClass = data.domainClass
        val nullableDomainClass: DomainClass? = data.nullableDomainClass
        val listOfRegularDomainClass: List<DomainClass> = data.listOfRegularDomainClass
        val mapOfRegularDomainClass: Map<String, DomainClass> = data.mapOfRegularDomainClass
    }
}