import com.example.testsuite.BasicObject
import net.bytebuddy.description.type.TypeDescription
import net.bytebuddy.matcher.ElementMatchers
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.DynamicTest
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestFactory
import org.junit.jupiter.api.TestInfo
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import TestUtils.assertNullable
import TestUtils.assertNotNullable
import TestUtils.extractField
import TestUtils.extractMatchingMethod
import TestUtils.SchemaMethodType

class BasicObjectTest {

    companion object {
        private const val SCHEMA_CLASS = "com.example.testsuite.BasicObject"

        // Byte Buddy TypeDescription of our target class, loaded once for all tests
        private lateinit var schemaClass: TypeDescription
        private lateinit var schemaBuilderClass: TypeDescription

        @JvmStatic
        @BeforeAll
        fun setUp() {
            val (schema, schemaBuilder) = TestUtils.createTypeDescriptions(SCHEMA_CLASS)
            schemaClass = schema
            schemaBuilderClass = schemaBuilder
        }

        @JvmStatic
        fun primitiveFieldsOfSchema() = setOf("primitive")

        @JvmStatic
        fun nullablePrimitiveWrapperFieldsOfSchema() = setOf("nullablePrimitive")

        @JvmStatic
        fun nonPrimitiveFieldsOfSchema() = setOf("string", "autoGeneratedJavaClass", "unionType")

        @JvmStatic
        fun nullableNonPrimitiveFieldsOfSchema() =
            setOf("nullableString", "nullableAutoGeneratedJavaClass", "nullableUnionType")
    }

    @TestFactory
    fun `test newBuilder methods are marked not nullable`(testInfo: TestInfo): List<DynamicTest> {
        val newBuilderMethodsDescription = schemaClass.declaredMethods
            .filter(ElementMatchers.named("newBuilder"))

        return newBuilderMethodsDescription.map {
            val annotations = it.declaredAnnotations

            DynamicTest.dynamicTest(
                "[${testInfo.displayName}] - method with the parameter ${it.parameters}"
            ) {
                annotations.assertNotNullable()
            }
        }.toList()
    }

    @TestFactory
    fun `test newBuilder methods parameter is marked nullable`(testInfo: TestInfo): List<DynamicTest> {
        val copyBuilderMethodsDescription = schemaClass.declaredMethods
            .filter(ElementMatchers.named("newBuilder"))
            .filter(ElementMatchers.takesArguments(1))

        return copyBuilderMethodsDescription.map {
            val parameter = it.parameters[0]
            val annotations = parameter.declaredAnnotations

            DynamicTest.dynamicTest(
                "[${testInfo.displayName}] - method with the parameter ${it.parameters}"
            ) {
                annotations.assertNullable()
            }
        }.toList()
    }

    @Test
    fun `test that the build method of the builder is marked as not nullable`() {
        val buildMethodDescription = schemaBuilderClass.declaredMethods
            .filter(ElementMatchers.named("build"))
            /*
            * Note: Adding this filter because for unknown reason it had found 2 build methods, so I added additional
            *  filter so that only the actually used one will be tested.
            */
            .filter(ElementMatchers.returns(TypeDescription.ForLoadedType(BasicObject::class.java)))
            .only

        val annotations = buildMethodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    /////////////////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field is marked as not nullable in the schema`(fieldName: String) {
        val fieldDescription = schemaClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field is marked as not nullable in the builder`(fieldName: String) {
        val fieldDescription = schemaBuilderClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field getter method is marked as not nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field getter method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field setter method parameter of is marked as not nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field setter method parameter of is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field setter method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("primitiveFieldsOfSchema")
    fun `test primitive field clear method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.CLEARER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    /////////////////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field is marked as nullable in the schema`(fieldName: String) {
        val fieldDescription = schemaClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field is marked as nullable in the builder`(fieldName: String) {
        val fieldDescription = schemaBuilderClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field getter method is marked as nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field getter method is marked as nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field setter method parameter is marked as nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field setter method parameter is marked as nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field setter method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullablePrimitiveWrapperFieldsOfSchema")
    fun `test nullable primitive field clear method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.CLEARER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    /////////////////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field is marked as not nullable in the schema`(fieldName: String) {
        val fieldDescription = schemaClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field is still marked as nullable in the builder`(fieldName: String) {
        val fieldDescription = schemaBuilderClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field getter method is marked as not nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field getter method is still marked as nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field setter method parameter is marked as not nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field setter method parameter is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field setter method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nonPrimitiveFieldsOfSchema")
    fun `test non primitive field clear method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.CLEARER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    /////////////////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field is marked as nullable in the schema`(fieldName: String) {
        val fieldDescription = schemaClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field is marked as nullable in the builder`(fieldName: String) {
        val fieldDescription = schemaBuilderClass.extractField(fieldName)

        val annotations = fieldDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field getter method is marked as nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field getter method is marked as nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.GETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field setter method parameter is marked as nullable in the schema`(fieldName: String) {
        val methodDescription = schemaClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field setter method parameter is marked as nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)
        val parameter = methodDescription.parameters[0]

        val annotations = parameter.declaredAnnotations

        annotations.assertNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field setter method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.SETTER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }

    @ParameterizedTest(name = "[{displayName}] - for field: {0}")
    @MethodSource("nullableNonPrimitiveFieldsOfSchema")
    fun `test nullable non primitive field clear method is marked as not nullable in the builder`(fieldName: String) {
        val methodDescription = schemaBuilderClass.extractMatchingMethod(fieldName, SchemaMethodType.CLEARER)

        val annotations = methodDescription.declaredAnnotations

        annotations.assertNotNullable()
    }
}