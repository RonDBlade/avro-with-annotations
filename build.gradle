plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// Create a new configuration for Avro
configurations {
    avroDeps
    compileOnlyResolvable {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom compileOnly
    }
}

dependencies {
    implementation 'org.apache.avro:avro:1.11.3'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains:annotations:24.1.0'
    implementation 'com.github.javaparser:javaparser-core:3.25.5'
    compileOnly 'org.jetbrains:annotations:24.1.0'
    annotationProcessor 'org.jetbrains:annotations:24.1.0'
    
    // Add dependencies to the Avro configuration
    avroDeps 'org.jetbrains:annotations:24.1.0'
    
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.apache.avro:avro:1.11.3'
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation("org.assertj:assertj-core:3.26.3")
}

test {
    useJUnitPlatform()
}

avro {
    createSetters = true
    fieldVisibility = "PRIVATE"
    stringType = "String"
    enableDecimalLogicalType = true
}

// Configure the Avro plugin to use our dependencies
tasks.withType(com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    classpath += configurations.avroDeps
}

// Create a new task for processing Avro classes
task processAvroClasses(type: JavaExec) {
    dependsOn compileJava
    dependsOn generateTestAvroJava
    mainClass = 'org.example.AvroClassProcessor'
    classpath = sourceSets.main.runtimeClasspath
    args = [
        "${project.buildDir}/generated-test-avro-java"
    ]
}

// Make test depend on Avro processing
compileTestKotlin.dependsOn generateTestAvroJava
compileTestKotlin.dependsOn processAvroClasses

//// Make Kotlin test depend on Avro generation and processing
//tasks.withType(compileTestKotlin).configureEach {
//    dependsOn generateTestAvroJava
//    dependsOn processAvroClasses
//}

// Configure test source set to include generated Avro classes
sourceSets {
    main {
        compileClasspath += configurations.compileOnlyResolvable
    }
    test {
        java {
            srcDirs += ["${project.buildDir}/generated-test-avro-java"]
        }
    }
}