import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
}

group = 'io.github.rondb'
version = '0.1.2'

repositories {
    mavenCentral()
}

gradlePlugin {
    website = 'https://github.com/rondb/avro-with-annotations'
    vcsUrl = 'https://github.com/rondb/avro-with-annotations.git'
    plugins {
        avroAnnotationsPlugin {
            id = 'io.github.rondb.avro-annotations'
            implementationClass = 'org.example.AvroAnnotationsPlugin'
            displayName = 'Avro Java Annotations Plugin'
            description = 'A Gradle plugin that adds nullability annotations to generated Java classes from .avsc files'
            tags = ['avro', 'kotlin', 'nullability', 'annotations']
        }
    }
}

// Create a new configuration for Avro
configurations {
    avroDeps
    compileOnlyResolvable {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom compileOnly
    }
}

dependencies {
    implementation 'org.apache.avro:avro:1.11.4'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains:annotations:24.1.0'
    implementation 'com.github.javaparser:javaparser-core:3.25.5'
    compileOnly 'org.jetbrains:annotations:24.1.0'
    annotationProcessor 'org.jetbrains:annotations:24.1.0'
    
    // Add Gradle API for plugin development
    compileOnly gradleApi()
    
    // Add dependencies to the Avro configuration
    avroDeps 'org.jetbrains:annotations:24.1.0'
    
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.apache.avro:avro:1.11.4'
}

test {
    useJUnitPlatform()
}

avro {
    createSetters = true
    fieldVisibility = "PRIVATE"
    stringType = "String"
    enableDecimalLogicalType = true
}

// Configure the Avro plugin to use our dependencies
tasks.withType(GenerateAvroJavaTask).configureEach {
    classpath += configurations.avroDeps
}

// Create a new task for processing Avro classes
tasks.register('processAvroClasses', JavaExec) {
    dependsOn compileJava
    dependsOn generateTestAvroJava
    mainClass = 'org.example.AvroClassProcessor'
    classpath = sourceSets.main.runtimeClasspath
    args = [
            "${project.buildDir}/generated-test-avro-java",
            "src/test/avro/*.avsc"
    ]
}

// Make test depend on Avro processing
compileTestKotlin.dependsOn generateTestAvroJava
compileTestKotlin.dependsOn processAvroClasses

// Configure test source set to include generated Avro classes
sourceSets {
    main {
        compileClasspath += configurations.compileOnlyResolvable
    }
    test {
        java {
            srcDirs += ["${project.buildDir}/generated-test-avro-java"]
        }
    }
}

// Configure resource processing to handle duplicates
tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = 'avro-annotations'
            version = project.version
        }
    }
    repositories {
        maven {
            name = 'localPluginRepository'
            url = "${buildDir}/repo"
        }
    }
}

// Make sure the plugin metadata is included in the publication
tasks.named('processResources') {
    from('src/main/resources') {
        include 'META-INF/gradle-plugins/*.properties'
    }
}

// Ensure all dependencies are included in the plugin jar
tasks.named('jar') {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes(
            'Main-Class': 'org.example.AvroClassProcessor'
        )
    }
}